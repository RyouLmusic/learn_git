2020-11-28 16:13:06 [main:0] - [INFO] Using
2020-11-28 16:13:06 [main:0] - [WARN] the SLF4J
2020-11-28 16:13:06 [main:0] - [ERROR] Facade
2020-11-28 16:13:06 [main:0] - [ERROR] Tomcat
2020-11-28 16:13:06 [main:0] - [WARN] the change

git log:查看操作仓库提交变换的记录
git reset --hard 版本号 :[其中 HEAD~num :  表示前几个版本号，现在版本的前几个版本，也可以通过 git reflog : 进行查询版本号]
git reflog:记录版本的移动

版本控制图：
┌────┐
│HEAD│
└────┘
   │
   └──> ○ append GPL
        │
        ○ add distributed
        │
        ○ wrote a readme file

改为指向add distributed：
┌────┐
│HEAD│
└────┘
   │
   │    ○ append GPL
   │    │
   └──> ○ add distributed
        │
		○ wrote a readme file

git diff: 查看修改的内容
git status: 查看状态（是否修改、是否未提交的内容）


工作区：我们电脑上的执行了git init命令之后的文件夹
暂存区(stage)：我们每次add之后没有进行commit的文件就会存在暂存区
分支：Git第一次会帮我们创建一个master分支，其他分支我们可以自己创建，我们commit的操作就是将暂存区的所有内容提交到当前分支(分支可以切换)

命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

git restore file ：指令使得在工作空间但是不在暂存区的文件撤销更改(内容恢复到没修改之前的状态)
git restore --staged file:的作用是将暂存区的文件从暂存区撤出，但不会更改文件的内容。

一个文件在工作区被删除之后可以使用以下两种方式进处理：
(use "git add/rm <file>..." to update what will be committed) ：直接使用git rm <file> 将版本库中的文件也同步删除
(use "git restore <file>..." to discard changes in working directory)：删错了，进行恢复


### 远程仓库

// 连接上远程仓库
git remote add origin https://github.com/xxx/xxx.git

// 推送到远程仓库
git push -u origin main

删除远程库
如果添加的时候地址写错了，或者就是想删除远程库，可以用
git remote rm <name>命令。使用前，建议先用git remote -v查看远程库信息：
然后，根据名字删除，比如删除origin：

总结
要关联一个远程库，使用命令git remote add origin https://github.com/xxx/xxx.git
关联一个远程库时必须给远程库指定一个名字，origin是默认习惯命名；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；


我们创建dev分支，然后切换到dev分支：
git checkout -b dev
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
git branch dev
git checkout dev

git branch: 查看当前分支，会列出所有分支，当前分支前面会标一个*号。

创建并切换到新的dev分支，可以使用：
git switch -c dev
直接切换到已有的master分支，可以使用：
git switch master
使用新的git switch命令，比git checkout要更容易理解。